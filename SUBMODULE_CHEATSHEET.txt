TODO: Replace other instances of this file in fractal repo with this instance, since this is the more updated version.

Adding a submodule to your project:

	git submodule add <URL> [path of the folder where it should be located]

That will cause changes to be staged in your staging area, so commit the submodule add.

When you diff the master project, subproject diffs don't get shown, they get abbreviated with commit hashes or something.
Anyway, if you want a nicer diff, use git diff --submodule to get all the submodule changes too. You've already got this in your config though so git diff
will work fine for you anyway.

THAT'S ALL YOU NEED TO DO IF YOUR ADDING SUBMODULES TO AN EXISTING PROJECT.

Cloning a project with submodules:

When you clone, you don't get the submodules, you get hulls for those submodules, but their files aren't filled in.
Use --recurse-submodules on git clone and problem solved. IMPORTANT: This is still necessary, even if you've got submodule.recurse set to true in your config.
It's a bit strange, but you gotta remember that.

If you forget to do that and/or you've got a project that's already there but with the submodule hulls, no issue, just do this:

	git submodule init <-- I think this takes the data stored in the .gitsubmodules file and puts it in your master .git/config file so that your master project knows about the submodules.
				It's very weird that the project doesn't just clone with the .git/config stuff inside but whatever.

	THEN

	git submodule update	<-- fetch and merge new changes and stuff into all the submodules (toplevel ones)

	ALTERNATIVELY

	just do git submodule update --init <-- combines both steps, it doesn't init again if it happens to already be initialized, so don't worry about that.
	
	ALSO: do git submodule update --init --recursive to go through all submodules, even submodules of submodules.


Getting upstream changes from remote in the submodules:

	Very easy, just go to the submodule and do normal git things like you would.

	OR

	From your master repo, just run git submodule update --remote (you might also need --recursive but I don't know, probably though)


// NOTE: The difference between specifying --remote and not doing so is this:
	- --remote will get changes from the remote and apply them to your submodules. This will happen even if your submodule is already at the requested commit. It will get all the new changes from
		upstream and it'll add the commit to the submodule. It won't update the master branch position in the submodule (although I think there's a setting or something you can do to make this
		happen, it's not super important, you can just do it manually though).

	- not using --remote will basically ask the master repo which commit of the submodule is associated with the master repos current state (because it keeps track of
		that), and if the submodule commit is outdated, it'll then fetch new data from the remote. But ONLY if it's outdated.

	- Also, using just the normal git submodule update will also scroll the submodule commit back in the commit history if it's on a commit that's too new. BUT only if it's actually on a commit,
		if it's got un-committed changes, it won't do anything AFAIK.
	IMPORTANT: Even if scrolling back the commit makes the current commit unrecoverable (in reality it's still there, you could find it in the reflog and go to it as long as git hasn't
		garbage collected yet), this will still scroll back the commit, so be careful. You should have your newest commit backed up to github before doing this.

	- ALSO, doing git submodule update -f will force the submodules (or a specific submodule) to update to the commit that they are registered as in the main repo, even if they have
		uncommitted changes.

	IMPORTANT: If you use git submodule update --remote, you'll have to commit the fact that the submodule has new commits to your master repo. Or you can git submodule update and the submodule
		will be reverted back to the commit that your master repo expects, as explained above.

	git submodule update --remote is basically like git pulling from inside your submodule.



IMPORTANT: The remote for a submodule:
	- In my opinion, the best way to specify the submodule URL is with a normal https absolute URL to it's repo.
	- This is great because it doesn't require any ssh keys to pull from and everyone whos recursively cloning the repo will get it with no issues.
	- IMPORTANT: It makes it a pain to push to origin though, because the URL requires a password or the git token management software thing.
	- The way to fix this is:
		--> just add a simple script in your submodule that executes the following:
			git remote set-url origin git@github.com:tartarus-git/repo.git
		--> This won't actually affect the submodules real URL, only the temporary origin URL that your copy of the submodule uses.
		--> This way, you can push changes to the submodule source repo easily, and when you push the master repo and other people pull it again, they will still have the URL origin source in the submodule.



Pulling master repo changes and submodule changes:

	git pull <-- will get changes and merge them, but it will only GET submodule changes. That means they will be recorded and they will be there, but they won't
			be actually applied to the submodules until you give the go ahead. Why is it like this? No idea.

	Basically, then do:

	git submodule update (--init because the pull might have added new submodules, in which case they have to be initialized, and --recursive because obvious)


	BUT:

	You can do git pull --recurse-submodules and it'll handle all of the above for you.

	BUT: You've got that in your config so you really only need to do git pull.
